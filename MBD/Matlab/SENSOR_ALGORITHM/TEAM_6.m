%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx
%    Worksheet: Sensor_record_20201214_133122_A
%
% Auto-generated by MATLAB on 21-Dec-2020 12:08:30

%% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 39);

% Specify sheet and range
opts.Sheet = "Sensor_record_20201214_133122_A";
opts.DataRange = "A1:AM7395";

% Specify column names and types
opts.VariableNames = ["ACCELEROMETERXms1", "ACCELEROMETERYms", "ACCELEROMETERZms", "GRAVITYXms", "GRAVITYYms", "GRAVITYZms", "LINEARACCELERATIONXms", "LINEARACCELERATIONYms", "LINEARACCELERATIONZms", "GYROSCOPEXrads", "GYROSCOPEYrads", "GYROSCOPEZrads", "LIGHTlux", "MAGNETICFIELDXT", "MAGNETICFIELDYT", "MAGNETICFIELDZT", "ORIENTATIONZazimuth", "ORIENTATIONXpitch", "ORIENTATIONYroll", "PROXIMITYi", "SOUNDLEVELdB", "LOCATIONLatitude", "LOCATIONLongitude", "LOCATIONAltitudeM", "LOCATIONAltitudegoogleM", "LOCATIONSpeedKmh", "LOCATIONAccuracyM", "LOCATIONORIENTATION", "SatellitesInRange", "TimeSinceStartInMs", "YYYYMODDHHMISS_SSS", "VarName32", "VarName33", "VarName34", "VarName35", "Time", "Sound_level", "Light_level", "Time1"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "string", "string", "categorical", "string", "string", "string", "categorical", "double", "string", "string", "string", "double", "double", "double", "double", "double", "double"];

% Specify variable properties
opts = setvaropts(opts, ["LOCATIONLatitude", "LOCATIONLongitude", "LOCATIONAltitudeM", "LOCATIONSpeedKmh", "LOCATIONAccuracyM", "LOCATIONORIENTATION", "YYYYMODDHHMISS_SSS", "VarName32", "VarName33"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["LOCATIONLatitude", "LOCATIONLongitude", "LOCATIONAltitudeM", "LOCATIONAltitudegoogleM", "LOCATIONSpeedKmh", "LOCATIONAccuracyM", "LOCATIONORIENTATION", "SatellitesInRange", "YYYYMODDHHMISS_SSS", "VarName32", "VarName33"], "EmptyFieldRule", "auto");

% Import the data
tbl = readtable("C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx", opts, "UseExcel", false);

%% Convert to output type
ACCELEROMETERXms1 = tbl.ACCELEROMETERXms1;
ACCELEROMETERYms = tbl.ACCELEROMETERYms;
ACCELEROMETERZms = tbl.ACCELEROMETERZms;
GRAVITYXms = tbl.GRAVITYXms;
GRAVITYYms = tbl.GRAVITYYms;
GRAVITYZms = tbl.GRAVITYZms;
LINEARACCELERATIONXms = tbl.LINEARACCELERATIONXms;
LINEARACCELERATIONYms = tbl.LINEARACCELERATIONYms;
LINEARACCELERATIONZms = tbl.LINEARACCELERATIONZms;
GYROSCOPEXrads = tbl.GYROSCOPEXrads;
GYROSCOPEYrads = tbl.GYROSCOPEYrads;
GYROSCOPEZrads = tbl.GYROSCOPEZrads;
LIGHTlux = tbl.LIGHTlux;
MAGNETICFIELDXT = tbl.MAGNETICFIELDXT;
MAGNETICFIELDYT = tbl.MAGNETICFIELDYT;
MAGNETICFIELDZT = tbl.MAGNETICFIELDZT;
ORIENTATIONZazimuth = tbl.ORIENTATIONZazimuth;
ORIENTATIONXpitch = tbl.ORIENTATIONXpitch;
ORIENTATIONYroll = tbl.ORIENTATIONYroll;
PROXIMITYi = tbl.PROXIMITYi;
SOUNDLEVELdB = tbl.SOUNDLEVELdB;
LOCATIONLatitude = tbl.LOCATIONLatitude;
LOCATIONLongitude = tbl.LOCATIONLongitude;
LOCATIONAltitudeM = tbl.LOCATIONAltitudeM;
LOCATIONAltitudegoogleM = tbl.LOCATIONAltitudegoogleM;
LOCATIONSpeedKmh = tbl.LOCATIONSpeedKmh;
LOCATIONAccuracyM = tbl.LOCATIONAccuracyM;
LOCATIONORIENTATION = tbl.LOCATIONORIENTATION;
SatellitesInRange = tbl.SatellitesInRange;
TimeSinceStartInMs = tbl.TimeSinceStartInMs;
YYYYMODDHHMISS_SSS = tbl.YYYYMODDHHMISS_SSS;
VarName32 = tbl.VarName32;
VarName33 = tbl.VarName33;
VarName34 = tbl.VarName34;
VarName35 = tbl.VarName35;
Time = tbl.Time;
Sound_level = tbl.Sound_level;[input0_0] = xlsread('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx','A2:C28');
[input0_1] = xlsread('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx','AD2:AD28');
input = [input0_0,input0_1];


data = input;


data1 = table;


data1.ACCELEROMETERXms1= data(:,1);
data1.ACCELEROMETERYms = data(:,2);
data1.ACCELEROMETERZms = data(:,3);
data1.Timesincestartinms = data(:,4);


x=data1.ACCELEROMETERXms1;
y=data1.ACCELEROMETERYms;
z=data1.ACCELEROMETERZms;
t=data1.Timesincestartinms;
stepcount = 0;

disp('Walking Steps')
length = sqrt(sum(x.^2 + y.^2 + z.^2, 2));
disp(length);

subplot(3,4,6);
stem(t, length);
xlabel('Time in (s)');
ylabel('Acceleration in (m/s^2)');
title('Magnitude')
magNoGrav = length - mean(length);
subplot(3,4,7);
stem(t, magNoGrav);
xlabel('Time in  (s)');
ylabel('Acceleration (m/s^2)');
title('No Gravity')

amag = abs(magNoGrav);
subplot(3,4,8);
stem(t, amag);
title('Absolute Magnitude')
xlabel('Time in  (s)');
ylabel('Acceleration Magnitude, No Gravity (m/s^2)');

if(length>=2)
    stepcount = stepcount+1;
    disp('stepcount')
end


Light_level = tbl.Light_level;
Time1 = tbl.Time1;

%%% Location                   99003203
mag=sqrt(ACCELEROMETERXms1.^2+ACCELEROMETERYms.^2+ACCELEROMETERZms.^2)

figure
LOCATIONLatitude=13.04
LOCATIONLongitude=77.61
geoplot(LOCATIONLatitude,LOCATIONLongitude,'--or');
%%% light sensor                       9900185
figure
data = xlsread('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx');
[value] = data(:,38);
[time] = data(:,39);
%Setting the initial value to the counter
i = 1;

%For loop to test all the values in the table
for loop = 1:159
    
    %condition to check the value in the variable
    if (value(i)>0 && value(i)<=1000)
        disp(value(i))
        disp('adjust the screen brightness to 5%')
        a=5;
        %increasing the counter value by 1
        i = i+1;
            
    elseif (value(i)>1001 && value(i)<=2000)
        disp(value(i))
        disp('adjust the screen brightness to 10%')
        a=10;
        i = i+1;     
            
    elseif (value(i)>2001 && value(i)<=3000)
        disp(value(i))
        disp('adjust the screen brightness to 15%')
        a=15;
         i = i+1;
            
    elseif (value(i)>3001 && value(i)<=4000)
        disp(value(i))
        disp('adjust the screen brightness to 20%')
        a=20;
        i = i+1;
            
    elseif (value(i)>4001 && value(i)<=5000)
        disp(value(i))
        disp('adjust the screen brightness to 25%')
        a=25;
        i = i+1;
            
    elseif (value(i)>5001 && value(i)<=6000)
        disp(value(i))
        disp('adjust the screen brightness to 30%')
        a=30;
        i = i+1;
            
    elseif (value(i)>6001 && value(i)<=7000)
        disp(value(i))
        disp('adjust the screen brightness to 35%')
        a=35;
        i = i+1;
            
    elseif (value(i)>7001 && value(i)<=8000)
        disp(value(i))
        disp('adjust the screen brightness to 40%')
        a=40;
        i = i+1;
            
    elseif (value(i)>8001 && value(i)<=9000)
        disp(value(i))
        disp('adjust the screen brightness to 45%')
        a=45;
        i = i+1;
            
    elseif (value(i)>9001 && value(i)<=10000)
        disp(value(i))
        disp('adjust the screen brightness to 50%')
        a=50;
        i = i+1;
            
    else
        disp(value(i))
        disp('adjust the screen brightness to max')
        a=70;
        i = i+1;
    end
end
plot(time,value);
xlabel('Intensity of Surrounding Light')
ylabel('screen intensity')
title('Screen Brightness Adjuster')
%%% Sound level                     9900187
figure
Sound_level = xlsread ('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx');
[x]=Sound_level(:,36);
[y]=Sound_level(:,37);
plot(x,y);
xlabel('Time')
ylabel('sound_level')
title('Music range')

i=1;
for sound=2:67
    if (y(i)>25 && y(i)<=35)
        disp(y(i))
        disp('no music or no one is talking')
        i = i+1;
    elseif (y(i)>35 && y(i)<=45)
        disp(y(i))
        disp('someone is talking')
         i = i+1;
    elseif (y(i)>45 && y(i)<=65)
        disp(y(i))
        disp('low beat song')
         i = i+1;
    else
        disp(y(i))
        disp('up beat song')
        i = i+1;
    end
end
%%% Accelerometer                 99003156 

figure

[input0_0] = xlsread('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx','A122:C160');
[input0_1] = xlsread('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx','AD122:AD160');
input = [input0_0,input0_1];


data = input;

data1 = table;

data1.ACCELEROMETERXms = data(:,1);
data1.ACCELEROMETERYms = data(:,2);
data1.ACCELEROMETERZms = data(:,3);
data1.Timesincestartinms = data(:,4);

clear opts tb1 input0_0 input0_1 R


ax=data1.ACCELEROMETERXms;
ay=data1.ACCELEROMETERYms;
az=data1.ACCELEROMETERZms;
t=data1.Timesincestartinms;
stepcount = 0;
% Changes in Acceleration Sensors will indicate steps
disp('Running')
length = sqrt(sum(ax.^2 + ay.^2 + az.^2, 2));
disp(length);
% Plot magnitude
subplot(3,4,6);
stem(t, length);
xlabel('Time (s)');
ylabel('Acceleration (m/s^2)');
title('Distance Covered')
% Remove effects of gravity
magNoGrav = length - mean(length);
subplot(3,4,7);
stem(t, magNoGrav);
xlabel('Time (s)');
ylabel('Acceleration (m/s^2)');
title('No Gravity')
% Absolute magnitude
amag = abs(magNoGrav);
subplot(3,4,8);
stem(t, amag);
title('Absolute Magnitude')
xlabel('Time (s)');
ylabel('Distance Covered, No Gravity (m/s^2)');
% step counting
if(length>3)
    stepcount = stepcount+4;
    disp('stepcount')
end

%%%   Light intensity                                99003188
data_one = xlsread("C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx","AH1:AI3209");
[lux] = data_one(:,1);
[time] = data_one(:,2);
i = 1;
for light = 2:3159
    if ( lux(i) > 80000  && stepdata.lux(i) < 85000 )
        disp(lux(i));
        disp("Bright noon condition");
        disp("Not optimum to do any outdoor activity");
        i = i+1;
    elseif( lux(i) > 18000 && lux(i) < 22000)
        disp(lux(i));
        disp("Partly cloudy sunny day");
        i = i+1;
    elseif(lux(i) > 9000 && lux(i) < 12000)
        disp(lux(i));
        disp("Golden Hour");
        i = i+1;
    elseif (lux(i) > 200 && lux(i) < 300)
        disp(lux(i));
        disp("optimal for bedroom dormitory or Cafeteria Eating");
        i = i+1;
   elseif( lux(i) >  300 && lux(i) < 500)
       disp(lux(i));
       disp("optimal for Classroom general or Conference Room");
       i = i+1;
   elseif( lux(i)> 50 && lux(i)< 100)
       disp(lux(i));
       disp("optimal for Corridor");
       i = i+1;
   elseif( lux(i) > 300 && lux(i) < 500)
       disp(lux(i));
       disp("optimal for Exhibit Space");
       i = i+1;
    elseif(lux(i) > 300 && lux(i) < 500)
        disp(lux(i));
        disp("optimal for Gymnasium-sports/games");
        i = i+1;
    elseif(lux(i) > 300 && lux(i) < 750)
        disp(lux(i));
        disp("optimal for kitchen ");
        i = i+1;
    elseif( lux(i)>500 && lux(i)<750)
        disp(lux(i));
        disp("optimal for laboratory");
        i = i+1;

    elseif( lux(i)> 200 && lux(i)<500)
        disp(lux(i));
        disp("optimal condition for library");
        i = i+1;
    elseif( lux(i)> 100 && lux(i) < 300)
        disp(lux(i));
        disp("optimal for loading dock");
        i = i+1;
     elseif( lux(i)> 300 && lux(i)< 750)
         disp(lux(i));
         disp("optimal for Workshop");
         i = i+1;
     elseif( lux(i) > 50 && lux(i) < 200)
         disp(lux(i));
         disp("optimal for storage room");
         i = i+1;
    else
        disp("No data");
        i = i+1;
    end
end

figure
plot(time,lux);
xlabel("Time in seconds");
ylabel("Light intensity in lux");
title("Light intensity vs Time");
%% step count                    99003197
figure
[input0_0] = xlsread('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx','A2:C28');
[input0_1] = xlsread('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx','AD2:AD28');
input = [input0_0,input0_1];


data = input;


data1 = table;


data1.ACCELEROMETERXms1= data(:,1);
data1.ACCELEROMETERYms = data(:,2);
data1.ACCELEROMETERZms = data(:,3);
data1.Timesincestartinms = data(:,4);


x=data1.ACCELEROMETERXms1;
y=data1.ACCELEROMETERYms;
z=data1.ACCELEROMETERZms;
t=data1.Timesincestartinms;
stepcount = 0;

disp('Walking Steps')
length = sqrt(sum(x.^2 + y.^2 + z.^2, 2));
disp(length);

subplot(3,4,6);
stem(t, length);
xlabel('Time in (s)');
ylabel('Acceleration in (m/s^2)');
title('Magnitude')
magNoGrav = length - mean(length);
subplot(3,4,7);
stem(t, magNoGrav);
xlabel('Time in  (s)');
ylabel('Acceleration (m/s^2)');
title('No Gravity')

amag = abs(magNoGrav);
subplot(3,4,8);
stem(t, amag);
title('Absolute Magnitude')
xlabel('Time in  (s)');
ylabel('Acceleration Magnitude, No Gravity (m/s^2)');

if(length>=2)
    stepcount = stepcount+1;
    disp('stepcount')
end





%% linear_acceleration     99003175
figure
imp=xlsread('C:\Users\99003197\Downloads\Sensor_record_20201214_133122_AndroSensor.xlsx');
[linear_X]=imp(:,7);
[linear_Y]=imp(:,8);
[linear_Z]=imp(:,9);
[time]=imp(:,30);
linear_accel=[linear_X,linear_Y,linear_Z,time];
%%Finding the velocity
vel_X=linear_X.*time;
vel_Y=linear_Y.*time;
vel_Z=linear_Z.*time;
%%Middle value
Middle_X=((max(vel_X)+min(vel_X))/2);
Middle_Y=((max(vel_Y)+min(vel_Y))/2);
Middle_Z=((max(vel_Z)+min(vel_Z))/2);
%%Plot the values for velocity
subplot(3,1,1);
plot(time,vel_X);
xlabel('Time(ms)')
ylabel('velocity X values')
title('Velocity in X plane')
subplot(3,1,2);
plot(time,vel_Y);
xlabel('Time(ms)')
ylabel('velocity Y values')
title('Velocity in Y plane')
subplot(3,1,3);
plot(time,vel_Z);
xlabel('Time(ms)')
ylabel('velocity Z values')
title('Velocity in Z plane')
for x=2:length(vel_X)-1
    if(vel_X(x)>Middle_X)
    else
    end
end
for y=2:length(vel_Y)-1
    if(vel_Y(y)>Middle_Y)
    else
    end
end
for z=2:length(vel_Z)-1
    if(vel_Z(z)>Middle_Z)
    else
    end
end
disp(max(vel_X))
disp(max(vel_Y))
disp(max(vel_Z))
disp(Middle_X)
disp(Middle_Y)
disp(Middle_Z)
disp(min(vel_X))
disp(min(vel_Y))
disp(min(vel_Z))
 



%% Clear temporary variables
clear opts tbl